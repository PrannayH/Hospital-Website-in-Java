package com.example.demo.controller;

import com.example.demo.model.CMed;
import com.example.demo.model.Child;
import com.example.demo.model.Consultation;
import com.example.demo.model.MedicalInfo;
import com.example.demo.model.Medication;
import com.example.demo.model.OBH;
import com.example.demo.model.Patient;
import com.example.demo.model.Reports;
import com.example.demo.repository.ConsultationRepository;
import com.example.demo.repository.PatientRepository;
import com.example.demo.service.ConsultationService;
import com.example.demo.service.MedicalInfoService;
import com.example.demo.service.PatientService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

@Controller
public class PatientController {
	
	@Autowired
    private PatientRepository patientRepository;
	
	@Autowired
    private ConsultationRepository consultationRepository;

    @Autowired
    private PatientService patientService;
    @Autowired
    private MedicalInfoService medicalInfoService;
    @Autowired
    private ConsultationService consultationService;
    
    private Patient savedPatient;  // Temporary storage for the patient
    private Consultation savedConsultation;

    @GetMapping("/patients")
    public String listPatients(Model model, @RequestParam(value = "keyword", required = false) String keyword) {
        List<Patient> patients = (keyword == null || keyword.isEmpty()) ? 
                patientService.getAllPatients() : 
                patientService.searchPatients(keyword);
        
        List<String> patientIds = patients.stream().map(Patient::getId).collect(Collectors.toList());
        
        model.addAttribute("patients", patients);
        model.addAttribute("patientIds", patientIds); // Adding patient IDs to the model
        
        model.addAttribute("keyword", keyword);
        return "patients";
    }
    
        @GetMapping("/patient/{id}")
        public String viewPatientDetails(@PathVariable String id, Model model) {
            Patient patient = patientService.getPatientById(id);
            MedicalInfo medicalInfo = medicalInfoService.getMedicalInfoByPatientId(id);
            if (medicalInfo == null) {
                return "redirect:/add-medical-info/"+ id; // Redirect to the medical_info page if medicalInfo is null
            }
         // Fetch previous consultations sorted by date of visit
            List<Consultation> previousConsultations = consultationService.getAllConsultationsByPatientId(id);
            previousConsultations.sort(Comparator.comparing(Consultation::getDateOfVisit).reversed());
            
            Date mostRecentDateOfVisit = null;
            if (!previousConsultations.isEmpty()) {
                // Get the most recent consultation's dateOfVisit
                mostRecentDateOfVisit = previousConsultations.get(0).getDateOfVisit();
            }
           
            
            model.addAttribute("patient", patient);
            model.addAttribute("medicalInfo", medicalInfo);
            model.addAttribute("previousConsultations", previousConsultations);
            model.addAttribute("mostRecentDateOfVisit", mostRecentDateOfVisit); // Add mostRecentDateOfVisit to the model

            
            return "view_patient_details";
        }

        @PostMapping("/patient/{id}")
        public String updatePatientDetails(@PathVariable String id,
                                           @ModelAttribute Patient updatedPatient,
                                           @ModelAttribute MedicalInfo updatedMedicalInfo,
                                           @ModelAttribute Consultation updatedConsultation,
                                           @RequestParam(value = "allergies", required = false) List<String> allergies,
                                           @RequestParam(value = "medicationNames", required = false) List<String> medicationNames,
                                           @RequestParam(value = "medicationFrequencies", required = false) List<String> medicationFrequencies,
                                           @RequestParam(value = "childGender", required = false) List<String> childGenders,
                                           @RequestParam(value = "childAge", required = false) List<Integer> childAges,
                                           @RequestParam(value = "childFTNDLSCS", required = false) List<String> childFtndLscs,
                                           @RequestParam(value = "childComplications", required = false) List<String> childComplications,
                                           @RequestParam(value = "habits", required = false) Map<String, String> habits,
                                           @RequestParam(value = "objective", required = false) Map<String, String> objective,
                                           @RequestParam(value = "Date", required = false) List<String> reportDates,
                                           @RequestParam(value = "Wt", required = false) List<Float> reportWt,
                                           @RequestParam(value = "BMI", required = false) List<Float> reportBmi,
                                           @RequestParam(value = "FBS", required = false) List<Float> reportFbs,
                                           @RequestParam(value = "PPBS", required = false) List<Float> reportPpbs,
                                           @RequestParam(value = "A1c", required = false) List<Float> reportA1c,
                                           @RequestParam(value = "SCr", required = false) List<Float> reportSCr,
                                           @RequestParam(value = "UAC", required = false) List<Float> reportUac,
                                           @RequestParam(value = "TC", required = false) List<Float> reportTc,
                                           @RequestParam(value = "TGL", required = false) List<Float> reportTgl,
                                           @RequestParam(value = "LDL", required = false) List<Float> reportLdl,
                                           @RequestParam(value = "HDL", required = false) List<Float> reportHdl,
                                           @RequestParam(value = "TSH", required = false) List<Float> reportTsh,
                                           @RequestParam(value = "Hb", required = false) List<Float> reportHb,
                                           @RequestParam(value = "TLC", required = false) List<Integer> reportTlc,
                                           @RequestParam(value = "EGFR", required = false) List<Integer> reportEgfr,
                                           @RequestParam(value = "D3", required = false) List<Integer> reportD3,
                                           @RequestParam(value = "B12", required = false) List<Integer> reportB12,
                                           @RequestParam(value = "AT", required = false) List<Integer> reportAt,
                                           @RequestParam(value = "LT4", required = false) List<Integer> reportLt4,
                                           @RequestParam(value = "MET", required = false) List<Integer> reportMet,
                                           @RequestParam(value = "GP", required = false) List<Integer> reportGp,
                                           @RequestParam(value = "DPP4", required = false) List<Integer> reportDpp4,
                                           @RequestParam(value = "VOG", required = false) List<Integer> reportVog,
                                           @RequestParam(value = "SGLT", required = false) List<Integer> reportSglt,
                                           @RequestParam(value = "INS", required = false) List<Integer> reportIns,
                                           @RequestParam(value = "Remarks", required = false) List<String> reportRemarks) {
            // Update patient details
            patientService.updatePatient(id, updatedPatient);

            // Update medical information
            MedicalInfo medicalInfo = medicalInfoService.getMedicalInfoByPatientId(id);
            if (allergies != null) {
                medicalInfo.setAllergies(allergies);
            }

            if (medicationNames != null && medicationFrequencies != null) {
                List<CMed> currentMedications = new ArrayList<>();
                for (int i = 0; i < medicationNames.size(); i++) {
                    CMed medication = new CMed();
                    medication.setMedicineName(medicationNames.get(i));
                    medication.setFreq(medicationFrequencies.get(i));
                    currentMedications.add(medication);
                }
                medicalInfo.setCurrentMedication(currentMedications);
            }

            // Update past history
            medicalInfo.setPastHistory(updatedMedicalInfo.getPastHistory());

            // Update family history
            medicalInfo.setFamilyHistory(updatedMedicalInfo.getFamilyHistory());

            // Update OB History
            OBH obh = updatedMedicalInfo.getObh();
            if (childGenders != null && childAges != null && childFtndLscs != null && childComplications != null) {
                List<Child> children = new ArrayList<>();
                for (int i = 0; i < childGenders.size(); i++) {
                    Child child = new Child();
                    child.setGender(childGenders.get(i));
                    child.setAge(childAges.get(i));
                    child.setType(childFtndLscs.get(i));
                    child.setComplications(childComplications.get(i));
                    children.add(child);
                }
                obh.setChildren(children);
            }
            medicalInfo.setObh(obh);

            medicalInfo.setHabits(updatedMedicalInfo.getHabits());
            medicalInfo.setObjective(updatedMedicalInfo.getObjective());
            
         // Update Reports
            List<Reports> reports = new ArrayList<>();
            if (reportDates != null) {
                for (int i = 0; i < reportDates.size(); i++) {
                    Reports report = new Reports();
                    report.setDate(reportDates.get(i));
                    if (reportWt != null && reportWt.size() > i) {
                        report.setWt(reportWt.get(i));
                    }
                    if (reportBmi != null && reportBmi.size() > i) {
                        report.setBMI(reportBmi.get(i));
                    }
                    if (reportFbs != null && reportFbs.size() > i) {
                        report.setFBS(reportFbs.get(i));
                    }
                    if (reportPpbs != null && reportPpbs.size() > i) {
                        report.setPPBS(reportPpbs.get(i));
                    }
                    if (reportA1c != null && reportA1c.size() > i) {
                        report.setA1c(reportA1c.get(i));
                    }
                    if (reportSCr != null && reportSCr.size() > i) {
                        report.setSCr(reportSCr.get(i));
                    }
                    if (reportUac != null && reportUac.size() > i) {
                        report.setUAC(reportUac.get(i));
                    }
                    if (reportTc != null && reportTc.size() > i) {
                        report.setTC(reportTc.get(i));
                    }
                    if (reportTgl != null && reportTgl.size() > i) {
                        report.setTGL(reportTgl.get(i));
                    }
                    if (reportLdl != null && reportLdl.size() > i) {
                        report.setLDL(reportLdl.get(i));
                    }
                    if (reportHdl != null && reportHdl.size() > i) {
                        report.setHDL(reportHdl.get(i));
                    }
                    if (reportTsh != null && reportTsh.size() > i) {
                        report.setTSH(reportTsh.get(i));
                    }
                    if (reportHb != null && reportHb.size() > i) {
                        report.setHb(reportHb.get(i));
                    }
                    if (reportTlc != null && reportTlc.size() > i) {
                        report.setTLC(reportTlc.get(i));
                    }
                    if (reportEgfr != null && reportEgfr.size() > i) {
                        report.setEGFR(reportEgfr.get(i));
                    }
                    if (reportD3 != null && reportD3.size() > i) {
                        report.setD3(reportD3.get(i));
                    }
                    if (reportB12 != null && reportB12.size() > i) {
                        report.setB12(reportB12.get(i));
                    }
                    if (reportAt != null && reportAt.size() > i) {
                        report.setAT(reportAt.get(i));
                    }
                    if (reportLt4 != null && reportLt4.size() > i) {
                        report.setLT4(reportLt4.get(i));
                    }
                    if (reportMet != null && reportMet.size() > i) {
                        report.setMET(reportMet.get(i));
                    }
                    if (reportGp != null && reportGp.size() > i) {
                        report.setGP(reportGp.get(i));
                    }
                    if (reportDpp4 != null && reportDpp4.size() > i) {
                        report.setDPP4(reportDpp4.get(i));
                    }
                    if (reportVog != null && reportVog.size() > i) {
                        report.setVOG(reportVog.get(i));
                    }
                    if (reportSglt != null && reportSglt.size() > i) {
                        report.setSGLT(reportSglt.get(i));
                    }
                    if (reportIns != null && reportIns.size() > i) {
                        report.setINS(reportIns.get(i));
                    }
                    if (reportRemarks != null && reportRemarks.size() > i) {
                        report.setRemarks(reportRemarks.get(i));
                    }
                    reports.add(report);
                }
            }
            medicalInfo.setReports(reports);

            

            medicalInfoService.updateMedicalInfo(medicalInfo);

            // Consultation consultation = consultationService.getLatestConsultationByPatientId(id);

            // consultationService.saveConsultation(consultation);

            return "redirect:/patient/" + id;
        }
    


    @GetMapping("/add-patient")
    public String showPersonalDetailsForm(Model model) {
        model.addAttribute("patient", new Patient());
        return "personal-details";
    }

    @PostMapping("/save-patient")
    public String savePatient(@ModelAttribute Patient patient) {
        savedPatient = patientRepository.save(patient);  // Save the patient and store it
        return "redirect:/add-medical-info/"+ savedPatient.getId();  // Redirect to the medical info form
    }
    
    

    
    @GetMapping("/consultation")
    public String showConsultationForm(@RequestParam String id, Model model) {
        Patient patient = patientService.getPatientById(id);
        model.addAttribute("consultation", new Consultation());
        model.addAttribute("patient",patient);
        return "consultation"; // Assuming "consultation" is the Thymeleaf template for consultation form
    }


    @PostMapping("/save-consultation")
    public String saveConsultation(@RequestParam("PatientId") String patientId, @ModelAttribute Consultation consultation) {
        // Fetch the patient using the provided ID
        Patient patient = patientService.getPatientById(patientId);
        
        // Set the patient reference in the consultation object
        consultation.setPatient(patient);
        consultation.setDateOfVisit(new Date());
        consultation.setMode(consultation.getMode());
        consultation.setReviewDate(consultation.getReviewDate());
        
        // Handle the list of Medication objects if it's not null
        if (consultation.getTreatment() != null) {
            List<Medication> treatment = new ArrayList<>();
            for (Medication medication : consultation.getTreatment()) {
                if (medication != null) {
                    Medication newMedication = new Medication();
                    newMedication.setMedicineName(medication.getMedicineName());
                    newMedication.setFrequency(medication.getFrequency());
                    newMedication.setNumberOfDays(medication.getNumberOfDays());
                    newMedication.setSpecialInstructions(medication.getSpecialInstructions());
                    treatment.add(newMedication);
                }
            }
            consultation.setTreatment(treatment);
        }
        
        
        // Save the consultation object along with the patient reference
        savedConsultation = consultationRepository.save(consultation);
        
        return "redirect:/prescription/"+savedConsultation.getId();
    }

    
    
    @GetMapping("/prescription/{id}")
    public String showPrescription(@PathVariable String id ,Model model) {
        // Fetch the necessary data from saved objects
        Consultation consultation = consultationService.getConsultationById(id);
        Patient patient = consultation.getPatient();
        MedicalInfo medicalInfo = medicalInfoService.getMedicalInfoByPatientId(patient.getId());

        // Add data to the model
        model.addAttribute("patient", patient);
        model.addAttribute("Id", consultation.getId());
        model.addAttribute("dateOfVisit", consultation.getDateOfVisit());
        model.addAttribute("mode", consultation.getMode());
        model.addAttribute("currentComplaints", consultation.getCurrentComplaints());
        model.addAttribute("diagnosis", consultation.getDiagnosis());
        model.addAttribute("treatment", consultation.getTreatment());
        model.addAttribute("investigations", consultation.getInvestigations());
        model.addAttribute("dietAdvice", consultation.getDietAdvice());
        model.addAttribute("exerciseAdvice", consultation.getExerciseAdvice());
        model.addAttribute("specialAdvice", consultation.getSpecialAdvice());
        model.addAttribute("reviewDate", consultation.getReviewDate());

        // Check if the patient has any allergies and mark in red if not NKA
        List<String> allergies = medicalInfo.getAllergies();
        boolean isNKA = allergies != null && allergies.contains("NKA");
        model.addAttribute("allergies", allergies);
        model.addAttribute("isNKA", isNKA);

        // Return the Thymeleaf template for prescription
        return "prescription";
    }
    
    @GetMapping("/consultation-details/{id}")
    public String viewConsultationDetails(@PathVariable String id, Model model) {
        Consultation consultation = consultationService.getConsultationById(id);
        MedicalInfo medicalInfo = medicalInfoService.getMedicalInfoByPatientId(consultation.getPatient().getId());
        model.addAttribute("consultation", consultation);
        model.addAttribute("Id", consultation.getId());
        model.addAttribute("medicalInfo",medicalInfo);
        return "consultation_details"; // Thymeleaf template to display consultation details
    }


    

}
